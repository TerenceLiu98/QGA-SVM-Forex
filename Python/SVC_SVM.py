# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NjkqRz8y2qPORl8PBENXQzIHCVgdSsY_
"""

#!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
#!tar -xzvf ta-lib-0.4.0-src.tar.gz
#%cd ta-lib
#!./configure --prefix=/usr
#!make
#!make install
#!pip install Ta-Lib
#%cd ..
import talib

import pandas as pd 
import numpy as np
from sklearn import svm
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

df = pd.read_csv("EURUSD_M1.csv")

df.head()

#X = df.drop(columns=['time', 'close', 'real_volume', ])
X = df[['open', 'high', 'low', 'tick_volume']][:-1]
#X = X.apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))
y = df['close'][1:]
y_label = []
for i in range(0, len(y)):
  if df['close'][i] <= df['open'][i]:
    label = -1
#  if df['close'][i] == df['open'][i]:
#    label = 0
  else:
    label = 1
  y_label.append(label)

# 小波滤噪
def wavelet_denoising(data):
    # 小波函数取db4
    db4 = pywt.Wavelet('db4')
    if type(data) != "Nontype":
        # 分解
        coeffs = pywt.wavedec(data, db4)
        # 高频系数置零
        coeffs[len(coeffs)-1] *= 0
        coeffs[len(coeffs)-2] *= 0
        # 重构
        meta = pywt.waverec(coeffs, db4)
        return meta

#close = wavelet_denoising(df['close'])
#X_wavelet = wavelet_denoising(X)

plt.figure()
plt.plot(df['time'], df['close'])
plt.plot(df['time'], df['open'])
plt.show()

X_train = X[333:]
y_train = y_label[333:]
X_train_1 = X[333:]
y_train_1 = y[333:]
clf = svm.SVC(C= 1000, kernel = 'rbf',probability = True)
reg = svm.SVR(kernel='poly', C=1e-3, degree=2,gamma=1e-8)
clf.fit(X_train,y_train)
reg.fit(X_train_1, y_train_1)

X_test = X[-333:]
y_test = y_label[-333:]
prediction = clf.predict(X_test)
confusion_matrix(y_test, prediction)

X_test = X[-333:]
y_test_1 = y[-333:]
prediction_1 = reg.predict(X_test)

plt.figure()
plt.plot(df['time'][333:], df['close'][333:])
plt.plot(df['time'][-333:], df['close'][-333:])
plt.plot(df['time'][-333:], prediction_1, marker = "|")
plt.show()